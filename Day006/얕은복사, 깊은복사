using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

// 객체가 생성될 때, 부모 레퍼런스에 대해 생성하면 부모만 생성, 소멸이되고 , 자식 레퍼런스에 대해 생성하면 부모 생성 -> 자식 생성 -> 자식 소멸 -> 부모 소멸

namespace OOPApp011
{
    class MyClass
    {
        public int MyField1;
        public int MyField2;

        //깊은복사
        public MyClass DeepCopy()
        {
            MyClass newCopy = new MyClass();
            newCopy.MyField1 = this.MyField1;
            newCopy.MyField2 = this.MyField2;
            return newCopy;
        }
    }
    internal class Program
    {
        static void Main(string[] args)
        {
            //MyClass source = new MyClass();  // source 객체 생성
            //source.MyField1 = 10;
            //source.MyField2 = 20;            // source 객체의 field값 선언

            //객체생성? 일반적으로 new를 통해서
            //MyClass target = source;         // target과 source가 같아짐
            //target.MyField2 = 30;            // target의 field값 수정

            //Console.WriteLine(source.MyField1 + " " + source.MyField2);        // 얕은복사
            //Console.WriteLine(target.MyField1 + " " + target.MyField2);        // source와 target은 같다.

            MyClass source = new MyClass();
            source.MyField1 = 10;
            source.MyField2 = 20;
            MyClass target = source.DeepCopy();
            target.MyField2 = 30;
            Console.WriteLine(source.MyField1 + " " + source.MyField2);        // 깊은복사
            Console.WriteLine(target.MyField1 + " " + target.MyField2);        // source와 target이 다르다.

        }
    }
}
